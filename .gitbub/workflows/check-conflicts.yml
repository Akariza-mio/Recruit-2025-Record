name: 检查与main分支的冲突

# 触发条件：推送代码或创建PR时
on:
  push:
    branches-ignore: [ main ]  # 忽略直接推送到main的情况
  pull_request:
    branches: [ main ]  # 当PR目标是main时

jobs:
  check-conflicts:
    runs-on: ubuntu-latest
    steps:
      - name: 拉取代码
        uses: actions/checkout@v4
        with:
          fetch-depth: 0  # 拉取所有历史，确保能获取main分支

      - name: 确保main分支是最新的
        run: |
          git fetch origin main:main  # 获取远程main分支到本地

      - name: 检查与main分支的冲突
        run: |
          # 找到当前分支与main分支的最近共同祖先
          BASE_COMMIT=$(git merge-base HEAD main)
          
          # 使用git merge-tree检查冲突
          if git merge-tree $BASE_COMMIT HEAD main | grep -q '^+<<<<<<<'; then
            echo "❌ 检测到与main分支存在冲突！"
            echo "请先合并main分支并解决冲突后再提交。"
            exit 1
          else
            echo "✅ 与main分支无冲突，可以安全合并。"
            exit 0
          fi

      - name: 冲突详情（仅当有冲突时显示）
        if: failure()
        run: |
          BASE_COMMIT=$(git merge-base HEAD main)
          git merge-tree $BASE_COMMIT HEAD main | grep -A 10 '^+<<<<<<<'
